@page "/cmd"

@using System.Text;
@using System.IO;
@using BluePope.BlazorWebShell.Lib;

<div class="row">
    <div class="col-12">
        <div id="consoleWrap" style="max-height:500px;overflow:auto;">
            <pre id="console">@cmdOutput</pre>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-12">
        <table class="table">
            <tr>
                <td><input type="text" class="form-control" @bind="cmd" @onkeyup="cmd_KeyUp" /></td>
                <td><button @onclick="SendCommand" type="button" class="btn btn-sm btn-primary">메시지 전송</button></td>
            </tr>
        </table>
    </div>
</div>

@code {
    static StringBuilder cmdOutput = new StringBuilder();
    static FixedProcess cmdProcess;
    static StreamWriter cmdStreamWriter;

    string cmd = "";

    [Inject]
    public IJSRuntime js { get; set; }

    protected override void OnInitialized()
    {
        if (cmdProcess == null)
        {
            cmdProcess = new FixedProcess();
            cmdProcess.StartInfo.FileName = "cmd";
            cmdProcess.StartInfo.UseShellExecute = false;
            cmdProcess.StartInfo.CreateNoWindow = true;
            cmdProcess.StartInfo.RedirectStandardOutput = true;
            cmdProcess.StartInfo.RedirectStandardInput = true;

            //다중 접속에 대한 이벤트 생각 해봐야지
            cmdProcess.OutputDataReceived += CmdProcess_OutputDataReceived; 
            //cmdProcess.EnableRaisingEvents = true;
            //cmdProcess.Exited += CmdProcess_Exited;

            cmdProcess.Start();

            cmdStreamWriter = cmdProcess.StandardInput;
            cmdProcess.BeginOutputReadLine();
        }

        //WebUtility.HtmlEncode(cmdOutput.ToString())

        base.OnInitialized();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Task.Run(async () =>
            {
                await Task.Delay(1000);
                await js.InvokeVoidAsync("ScrollDown");
            });
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private void CmdProcess_OutputDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (e.Data != null)
        {
            this.InvokeAsync(async () =>
            {
                cmdOutput.Append(e.Data);
                StateHasChanged();

                await js.InvokeVoidAsync("ScrollDown");
            }).GetAwaiter().GetResult();
        }
    }

    public void SendCommand()
    {
        cmdStreamWriter.WriteLine(cmd);
        cmd = "";
        StateHasChanged();
    }


    /// <summary>
    /// keydown keypress 시 cmd 값이 변경되지 않은 상태로 나옴, keyup 만 정상적으로 가져옴
    /// </summary>
    /// <param name="e"></param>
    public void cmd_KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendCommand();
        }
    }
}